{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport axios from 'axios';\nimport Patient from '../../../Ethereum/patient';\nimport CryptoJs from 'crypto-js';\nimport Layout from \"../../../components/Layout\";\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\nimport web3 from \"../../../Ethereum/web3\";\nimport { Router } from \"../../../routes\";\n\nclass addRecord extends Reac.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: '',\n      dataHash: '',\n      dataOwner: '',\n      date: ''\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault(); // hash the data\n\n      const refer = this.state.data;\n      const hashedRefer = CryptoJs.SHA256(refer);\n      const item = {\n        data: refer,\n        dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\n        dataOwner: this.state.dataOwner,\n        date: this.state.date\n      };\n      const patient = Patient.getContract(item.dataOwner);\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await patient.methods.StoreReferences(item.dataHash, item.date).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        console.log({\n          errormessage: err.message\n        });\n      } // send to private server\n\n\n      axios.post('http://localhost:5000/references/save', item).then(res => console.log(res.data));\n      console.log(item);\n      this.setState({\n        data: '',\n        dataHash: '',\n        dataOwner: '',\n        date: ''\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    const {\n      address\n    } = props.query;\n    return {\n      address\n    };\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"div\", null, __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      label: \"Input Data\",\n      value: this.state.data,\n      onChange: event => this.setState({\n        data: event.target.value\n      })\n    }), __jsx(Input, {\n      label: \"Data Owner\",\n      value: this.dataOwner,\n      onChange: event => this.setState({\n        dataOwner: event.target.value\n      })\n    }), __jsx(Input, {\n      label: \"Date \",\n      value: this.state.date,\n      onChange: event => this.setState({\n        date: event.target.value\n      })\n    })), __jsx(\"button\", {\n      className: \"btn btn-primary\"\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default addRecord;","map":{"version":3,"sources":["D:/Project/Local server/pages/patients/records/addRecord.js"],"names":["React","axios","Patient","CryptoJs","Layout","Button","Input","Form","Message","web3","Router","addRecord","Reac","Component","data","dataHash","dataOwner","date","event","preventDefault","refer","state","hashedRefer","SHA256","item","toString","enc","Hex","patient","getContract","accounts","eth","getAccounts","methods","StoreReferences","send","from","err","console","log","errormessage","message","post","then","res","setState","getInitialProps","props","address","query","render","onSubmit","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Patient from '../../../Ethereum/patient';\r\nimport CryptoJs from 'crypto-js';\r\nimport Layout from \"../../../components/Layout\";\r\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\r\nimport web3 from \"../../../Ethereum/web3\";\r\nimport { Router } from \"../../../routes\";\r\n\r\nclass addRecord extends Reac.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query\r\n        return { address }\r\n    }\r\n\r\n    state = {\r\n        data: '',\r\n        dataHash: '',\r\n        dataOwner: '',\r\n        date: ''\r\n    }\r\n    onSubmit = async event => {\r\n        event.preventDefault();\r\n        // hash the data\r\n        const refer = this.state.data;\r\n        const hashedRefer = CryptoJs.SHA256(refer);\r\n        const item =\r\n        {\r\n            data: refer,\r\n            dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\r\n            dataOwner: this.state.dataOwner,\r\n            date: this.state.date\r\n        }\r\n        const patient = Patient.getContract(item.dataOwner);\r\n\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            await patient.methods.StoreReferences(\r\n                item.dataHash,\r\n                item.date).send({\r\n                    from: accounts[0],\r\n                });\r\n        } catch (err) {\r\n            console.log({ errormessage: err.message });\r\n        }\r\n        // send to private server\r\n        axios.post('http://localhost:5000/references/save', item)\r\n            .then(res => console.log(res.data));\r\n\r\n        console.log(item);\r\n\r\n        this.setState({\r\n            data: '',\r\n            dataHash: '',\r\n            dataOwner: '',\r\n            date: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <div>\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <Form.Field>\r\n                            <Input\r\n                                label=\"Input Data\"\r\n                                value={this.state.data}\r\n                                onChange={event => this.setState({ data: event.target.value })} />\r\n\r\n                            <Input\r\n                                label=\"Data Owner\"\r\n                                value={this.dataOwner}\r\n                                onChange={event => this.setState({ dataOwner: event.target.value })} />\r\n\r\n                            <Input\r\n                                label=\"Date \"\r\n                                value={this.state.date}\r\n                                onChange={event => this.setState({ date: event.target.value })} />\r\n                        </Form.Field>\r\n                        <button className=\"btn btn-primary\">Submit</button>\r\n                    </Form>\r\n                </div>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default addRecord;"]},"metadata":{},"sourceType":"module"}