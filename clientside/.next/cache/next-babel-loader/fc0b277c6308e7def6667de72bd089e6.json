{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Patient from \"../../Ethereum/patient\"; // import header from \"../../components/header\";\n\nimport { Card, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../Ethereum/web3\";\nimport { Link } from \"../../routes\";\n\nvar patientShow = /*#__PURE__*/function (_React$Component) {\n  _inherits(patientShow, _React$Component);\n\n  var _super = _createSuper(patientShow);\n\n  function patientShow() {\n    _classCallCheck(this, patientShow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(patientShow, [{\n    key: \"renderCards\",\n    value: function renderCards() {\n      var _this$props = this.props,\n          dataReference = _this$props.dataReference,\n          uploadTime = _this$props.uploadTime;\n      var items = [{\n        header: dataReference,\n        meta: uploadTime,\n        description: \"to access the data click on the link at the top\",\n        style: {\n          overflowWrap: \"break-word\"\n        }\n      }];\n      return __jsx(Card.Group, {\n        items: items\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Column, {\n        width: 10\n      }, __jsx(Grid.Row, null, \" \", this.renderCards(), \" \"), __jsx(Grid.Row, null, __jsx(Link, {\n        route: \"/patients/\".concat(this.props.address, \"/requests\")\n      }, __jsx(\"a\", null, __jsx(Button, {\n        content: \"view Requests\",\n        className: \"ui green button\"\n      })))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address, patient, referencesCount, references;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = props.query.address;\n              patient = Patient(address);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(patient.methods.GetReferences().call());\n\n            case 4:\n              referencesCount = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(referencesCount)).fill().map(function (element, index) {\n                return patient.methods.data_references(index).call();\n              })));\n\n            case 7:\n              references = _context.sent;\n              console.log(references);\n              return _context.abrupt(\"return\", {\n                references: references\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return patientShow;\n}(React.Component);\n\nexport default patientShow;","map":{"version":3,"sources":["D:/Project/Local server/pages/patients/show.js"],"names":["React","Layout","Patient","Card","Grid","Button","web3","Link","patientShow","props","dataReference","uploadTime","items","header","meta","description","style","overflowWrap","renderCards","address","query","patient","methods","GetReferences","call","referencesCount","Promise","all","Array","parseInt","fill","map","element","index","data_references","references","console","log","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CACA;;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,QAAmC,mBAAnC;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,IAAT,QAAqB,cAArB;;IAEMC,W;;;;;;;;;;;;;kCAmBY;AAAA,wBAIN,KAAKC,KAJC;AAAA,UAENC,aAFM,eAENA,aAFM;AAAA,UAGNC,UAHM,eAGNA,UAHM;AAMV,UAAMC,KAAK,GAAG,CACV;AACIC,QAAAA,MAAM,EAAEH,aADZ;AAEII,QAAAA,IAAI,EAAEH,UAFV;AAGII,QAAAA,WAAW,EACP,iDAJR;AAKIC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAE;AAAhB;AALX,OADU,CAAd;AASA,aAAO,MAAC,IAAD,CAAM,KAAN;AAAY,QAAA,KAAK,EAAEL;AAAnB,QAAP;AACH;;;6BACQ;AACL,aACI,MAAC,MAAD,QACI,MAAC,IAAD,QACI,MAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAApB,SACI,MAAC,IAAD,CAAM,GAAN,aAAY,KAAKM,WAAL,EAAZ,MADJ,EAEI,MAAC,IAAD,CAAM,GAAN,QACI,MAAC,IAAD;AAAM,QAAA,KAAK,sBAAe,KAAKT,KAAL,CAAWU,OAA1B;AAAX,SACI,iBACI,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,eAAhB;AAAgC,QAAA,SAAS,EAAC;AAA1C,QADJ,CADJ,CADJ,CAFJ,CADJ,CADJ,CADJ;AAgBH;;;oCApD4BV,K;;;;;;AACjBU,cAAAA,O,GAAYV,KAAK,CAACW,K,CAAlBD,O;AACFE,cAAAA,O,GAAUnB,OAAO,CAACiB,OAAD,C;;+CAGOE,OAAO,CAACC,OAAR,CAAgBC,aAAhB,GAAgCC,IAAhC,E;;;AAAxBC,cAAAA,e;;+CACmBC,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACJ,eAAD,CAAT,CAAL,CACKK,IADL,GAEKC,GAFL,CAES,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACrB,uBAAOZ,OAAO,CAACC,OAAR,CAAgBY,eAAhB,CAAgCD,KAAhC,EAAuCT,IAAvC,EAAP;AACH,eAJL,CADqB,C;;;AAAnBW,cAAAA,U;AAQNC,cAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;+CACO;AAAEA,gBAAAA,UAAU,EAAVA;AAAF,e;;;;;;;;;;;;EAhBWnC,KAAK,CAACsC,S;;AAuDhC,eAAe9B,WAAf","sourcesContent":["import React from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Patient from \"../../Ethereum/patient\";\r\n// import header from \"../../components/header\";\r\nimport { Card, Grid, Button } from \"semantic-ui-react\";\r\nimport web3 from \"../../Ethereum/web3\";\r\nimport { Link } from \"../../routes\";\r\n\r\nclass patientShow extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query;\r\n        const patient = Patient(address);\r\n\r\n\r\n        const referencesCount = await patient.methods.GetReferences().call();\r\n        const references = await Promise.all(\r\n            Array(parseInt(referencesCount))\r\n                .fill()\r\n                .map((element, index) => {\r\n                    return patient.methods.data_references(index).call();\r\n                })\r\n        );\r\n\r\n        console.log(references);\r\n        return { references };\r\n\r\n    }\r\n    renderCards() {\r\n        const {\r\n            dataReference,\r\n            uploadTime,\r\n        } = this.props;\r\n\r\n        const items = [\r\n            {\r\n                header: dataReference,\r\n                meta: uploadTime,\r\n                description:\r\n                    \"to access the data click on the link at the top\",\r\n                style: { overflowWrap: \"break-word\" }\r\n            },\r\n        ];\r\n        return <Card.Group items={items} />;\r\n    }\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Column width={10}>\r\n                        <Grid.Row> {this.renderCards()} </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Link route={`/patients/${this.props.address}/requests`}>\r\n                                <a>\r\n                                    <Button content=\"view Requests\" className=\"ui green button\" />\r\n                                </a>\r\n                            </Link>\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default patientShow;\r\n"]},"metadata":{},"sourceType":"module"}