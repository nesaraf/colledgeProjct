{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport axios from 'axios';\nimport Patient from '../../../Ethereum/patient';\nimport CryptoJs from 'crypto-js';\nimport Layout from \"../../../components/Layout\";\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\nimport web3 from \"../../../Ethereum/web3\";\nimport Router from 'next/router';\n\nvar addRecord = /*#__PURE__*/function (_React$Component) {\n  _inherits(addRecord, _React$Component);\n\n  var _super = _createSuper(addRecord);\n\n  function addRecord() {\n    var _this;\n\n    _classCallCheck(this, addRecord);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: '',\n      dataHash: '',\n      dataOwner: _this.props.address,\n      date: '',\n      loading: false,\n      uploadedToChain: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var refer, hashedRefer, address, item, patient, accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault(); // console.log(this.renderDate());\n                // hash the data\n\n                refer = _this.state.data;\n                hashedRefer = CryptoJs.SHA256(refer);\n                address = _this.props.address;\n                item = {\n                  data: refer,\n                  dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\n                  dataOwner: _this.state.dataOwner,\n                  date: _this.renderDate()\n                };\n                patient = Patient(address);\n                _context.prev = 6;\n                _this.state.loading = true;\n                _context.next = 10;\n                return web3.eth.getAccounts();\n\n              case 10:\n                accounts = _context.sent;\n                _context.next = 13;\n                return patient.methods.StoreReferences(item.dataHash, item.date).send({\n                  from: accounts[0]\n                });\n\n              case 13:\n                _this.state.uploadedToChain = true;\n                _context.next = 19;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](6);\n                console.log({\n                  errormessage: _context.t0.message\n                });\n\n              case 19:\n                // send to private server\n                if (_this.state.uploadedToChain == true) {\n                  axios.post('http://localhost:5000/info/save', item).then(function (res) {\n                    return console.log(res.data);\n                  })[\"catch\"](function (error) {\n                    return console.log(error);\n                  });\n\n                  _this.setState({\n                    data: '',\n                    dataHash: '',\n                    date: '',\n                    loading: false,\n                    uploadedToChain: false\n                  });\n\n                  Router.back();\n                }\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[6, 16]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(addRecord, [{\n    key: \"renderDate\",\n    value: function renderDate() {\n      var tempDate = new Date();\n      var date = tempDate.getMonth() + 1 + '-' + tempDate.getDate() + '-' + tempDate.getFullYear() + ' at ';\n      var timeNow = tempDate.toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        hour12: true\n      });\n      var dateTime = date + timeNow;\n      return dateTime;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var address = this.props.address;\n      return __jsx(Layout, null, __jsx(\"div\", null, __jsx(Form, {\n        onSubmit: this.onSubmit\n      }, __jsx(Form.Field, null, __jsx(Input, {\n        label: \"Input Data\",\n        value: this.state.data,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            data: event.target.value\n          });\n        }\n      }), __jsx(Input, {\n        label: \"Data Owner\",\n        value: this.state.dataOwner,\n        disabled: true\n      })), __jsx(Button, {\n        loading: this.state.loading,\n        className: \"btn btn-primary\"\n      }, \"Submit\"))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(props) {\n        var address;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                address = props.query.address;\n                return _context2.abrupt(\"return\", {\n                  address: address\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x2) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return addRecord;\n}(React.Component);\n\nexport default addRecord;","map":{"version":3,"sources":["D:/Project/clientside/pages/patients/records/addRecord.js"],"names":["React","axios","Patient","CryptoJs","Layout","Button","Input","Form","Message","web3","Router","addRecord","data","dataHash","dataOwner","props","address","date","loading","uploadedToChain","event","preventDefault","refer","state","hashedRefer","SHA256","item","toString","enc","Hex","renderDate","patient","eth","getAccounts","accounts","methods","StoreReferences","send","from","console","log","errormessage","message","post","then","res","error","setState","back","tempDate","Date","getMonth","getDate","getFullYear","timeNow","toLocaleString","hour","minute","second","hour12","dateTime","onSubmit","target","value","query","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Patient from '../../../Ethereum/patient';\r\nimport CryptoJs from 'crypto-js';\r\nimport Layout from \"../../../components/Layout\";\r\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\r\nimport web3 from \"../../../Ethereum/web3\";\r\nimport Router from 'next/router';\r\n\r\n\r\nclass addRecord extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query\r\n        return { address }\r\n    }\r\n\r\n    state = {\r\n        data: '',\r\n        dataHash: '',\r\n        dataOwner: this.props.address,\r\n        date: '',\r\n        loading: false,\r\n        uploadedToChain: false,\r\n    }\r\n    renderDate() {\r\n\r\n        const tempDate = new Date();\r\n        const date = (tempDate.getMonth() + 1)\r\n            + '-' + tempDate.getDate() + '-'\r\n            + tempDate.getFullYear() + ' at ';\r\n        const timeNow = tempDate.toLocaleString('en-US', {\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            second: 'numeric',\r\n            hour12: true\r\n        })\r\n        const dateTime = date + timeNow;\r\n        return (\r\n            dateTime\r\n        );\r\n    }\r\n    onSubmit = async event => {\r\n        event.preventDefault();\r\n        // console.log(this.renderDate());\r\n        // hash the data\r\n        const refer = this.state.data;\r\n        const hashedRefer = CryptoJs.SHA256(refer);\r\n        const { address } = this.props;\r\n        const item =\r\n        {\r\n            data: refer,\r\n            dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\r\n            dataOwner: this.state.dataOwner,\r\n            date: this.renderDate()\r\n        }\r\n        const patient = Patient(address);\r\n\r\n        try {\r\n            this.state.loading = true;\r\n            const accounts = await web3.eth.getAccounts();\r\n            await patient.methods.StoreReferences(\r\n                item.dataHash,\r\n                item.date).send({\r\n                    from: accounts[0],\r\n                });\r\n            this.state.uploadedToChain = true;\r\n        } catch (err) {\r\n            console.log({ errormessage: err.message });\r\n        }\r\n        // send to private server\r\n        if (this.state.uploadedToChain == true) {\r\n            axios.post('http://localhost:5000/info/save', item)\r\n                .then(res => console.log(res.data))\r\n                .catch(error => console.log(error));\r\n\r\n\r\n            this.setState({\r\n                data: '',\r\n                dataHash: '',\r\n                date: '',\r\n                loading: false,\r\n                uploadedToChain: false\r\n            })\r\n            Router.back();\r\n        }\r\n    }\r\n    render() {\r\n        const { address } = this.props;\r\n        return (\r\n            <Layout>\r\n                <div>\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <Form.Field>\r\n                            <Input\r\n                                label=\"Input Data\"\r\n                                value={this.state.data}\r\n                                onChange={event => this.setState({ data: event.target.value })} />\r\n\r\n                            <Input\r\n                                label=\"Data Owner\"\r\n                                value={this.state.dataOwner} disabled\r\n                            />\r\n\r\n                            {/* <Input\r\n                                label=\"Date \"\r\n                                value={this.state.date}\r\n                                onChange={event => this.setState({ date: event.target.value })} /> */}\r\n                        </Form.Field>\r\n                        <Button loading={this.state.loading} className=\"btn btn-primary\">Submit</Button>\r\n                    </Form>\r\n                </div>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default addRecord;"]},"metadata":{},"sourceType":"module"}