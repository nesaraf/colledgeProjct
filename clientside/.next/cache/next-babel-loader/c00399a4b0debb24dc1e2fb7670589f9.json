{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Patient from \"../../Ethereum/patient\";\nimport truncateMiddle from \"truncate-middle\"; // import header from \"../../components/header\";\n\nimport { Card, Table, Grid, Button, Popup, GridColumn, GridRow } from \"semantic-ui-react\"; // import web3 from \"../../Ethereum/web3\";\n\nimport { Link } from \"../../routes\";\n\nvar patientShow = /*#__PURE__*/function (_React$Component) {\n  _inherits(patientShow, _React$Component);\n\n  var _super = _createSuper(patientShow);\n\n  function patientShow() {\n    _classCallCheck(this, patientShow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(patientShow, [{\n    key: \"PopupAddress\",\n    value: function PopupAddress(text) {\n      return __jsx(Popup, {\n        content: text,\n        trigger: __jsx(Button, {\n          content: truncateMiddle(text, 5, 5, '....')\n        })\n      });\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow() {\n      var _this = this;\n\n      return this.props.references.map(function (link, index) {\n        return __jsx(Table.Row, null, __jsx(Table.Cell, null, index), __jsx(Table.Cell, null, link.TimeStamp), __jsx(Table.Cell, null, _this.PopupAddress(link.DataHash)), __jsx(Table.Cell, null, __jsx(Link, {\n          route: \"/records/read/\".concat(link.DataHash)\n        }, \"Read\")));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var address = this.props.address;\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, {\n        columns: 2\n      }, __jsx(Grid.Column, null, __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"ID\"), __jsx(Table.HeaderCell, null, \"Time\"), __jsx(Table.HeaderCell, null, \"Reference\"), __jsx(Table.HeaderCell, null, \"Read\"))), __jsx(Table.Body, null, this.renderRow()))), __jsx(Grid.Column, null, __jsx(Link, {\n        route: \"/records/add/\".concat(address)\n      }, __jsx(\"a\", null, __jsx(Button, {\n        content: \"send data\",\n        primary: true,\n        floated: \"right\"\n      })))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address, patient, _referencesCount, references;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = props.query.address;\n              patient = Patient(address);\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(patient.methods.GetReferences().call());\n\n            case 5:\n              _referencesCount = _context.sent;\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n\n            case 11:\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(referencesCount)).fill().map(function (element, index) {\n                return patient.methods.data_references(index).call();\n              })));\n\n            case 13:\n              references = _context.sent;\n              return _context.abrupt(\"return\", {\n                references: references,\n                address: address\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 8]], Promise);\n    }\n  }]);\n\n  return patientShow;\n}(React.Component);\n\nexport default patientShow;","map":{"version":3,"sources":["D:/Project/Local server/pages/patients/show.js"],"names":["React","Layout","Patient","truncateMiddle","Card","Table","Grid","Button","Popup","GridColumn","GridRow","Link","patientShow","text","props","references","map","link","index","TimeStamp","PopupAddress","DataHash","address","renderRow","query","patient","methods","GetReferences","call","referencesCount","console","log","Promise","all","Array","parseInt","fill","element","data_references","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Patient from \"../../Ethereum/patient\";\r\nimport truncateMiddle from \"truncate-middle\";\r\n// import header from \"../../components/header\";\r\nimport { Card, Table, Grid, Button, Popup, GridColumn, GridRow } from \"semantic-ui-react\";\r\n// import web3 from \"../../Ethereum/web3\";\r\nimport { Link } from \"../../routes\";\r\n\r\nclass patientShow extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query;\r\n        const patient = Patient(address);\r\n\r\n        try {\r\n            const referencesCount = await patient.methods.GetReferences().call();\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n        const references = await Promise.all(\r\n            Array(parseInt(referencesCount))\r\n                .fill()\r\n                .map((element, index) => {\r\n                    return patient.methods.data_references(index).call();\r\n                })\r\n        );\r\n\r\n\r\n        return {\r\n            references, address\r\n        };\r\n\r\n    }\r\n    PopupAddress(text) {\r\n        return (\r\n\r\n            <Popup content={text}\r\n                trigger={<Button content={truncateMiddle(text, 5, 5, '....')} />} />\r\n\r\n        )\r\n    }\r\n    renderRow() {\r\n\r\n\r\n        return this.props.references.map((link, index) => {\r\n            return (\r\n                <Table.Row>\r\n                    <Table.Cell>{index}</Table.Cell>\r\n                    <Table.Cell>{link.TimeStamp}</Table.Cell>\r\n                    <Table.Cell>\r\n                        {this.PopupAddress(link.DataHash)}\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        <Link route={`/records/read/${link.DataHash}`}>Read</Link>\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n            )\r\n        });\r\n\r\n    }\r\n    render() {\r\n        const { address } = this.props;\r\n        return (\r\n            <Layout>\r\n                <Grid >\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column>\r\n                            <Table>\r\n                                <Table.Header>\r\n                                    <Table.Row>\r\n                                        <Table.HeaderCell>ID</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Time</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Reference</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Read</Table.HeaderCell>\r\n                                    </Table.Row>\r\n                                </Table.Header>\r\n                                <Table.Body>{this.renderRow()}</Table.Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Link route={`/records/add/${address}`}>\r\n                                <a>\r\n                                    <Button\r\n                                        content=\"send data\"\r\n                                        primary\r\n                                        floated=\"right\"\r\n\r\n                                    />\r\n                                </a>\r\n                            </Link>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid >\r\n            </Layout >\r\n        );\r\n    }\r\n}\r\nexport default patientShow;\r\n"]},"metadata":{},"sourceType":"module"}