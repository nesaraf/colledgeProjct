{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Patient from \"../../Ethereum/patient\";\nimport truncateMiddle from \"truncate-middle\"; // import header from \"../../components/header\";\n\nimport { Card, Table, Grid, Button, Popup, GridColumn, GridRow } from \"semantic-ui-react\"; // import web3 from \"../../Ethereum/web3\";\n\nimport { Link } from \"../../routes\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nvar patientShow = /*#__PURE__*/function (_React$Component) {\n  _inherits(patientShow, _React$Component);\n\n  var _super = _createSuper(patientShow);\n\n  function patientShow() {\n    var _this;\n\n    _classCallCheck(this, patientShow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      copied: false\n    });\n\n    return _this;\n  }\n\n  _createClass(patientShow, [{\n    key: \"PopupAddress\",\n    value: function PopupAddress(text) {\n      var _this2 = this;\n\n      return __jsx(CopyToClipboard, {\n        text: text,\n        onCopy: function onCopy() {\n          return _this2.state.copied = true;\n        }\n      }, __jsx(Popup, {\n        content: text,\n        trigger: __jsx(Button, {\n          content: truncateMiddle(text, 5, 5, '....')\n        })\n      }));\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow() {\n      var _this3 = this;\n\n      return this.props.references.map(function (link, index) {\n        return __jsx(Table.Row, null, __jsx(Table.Cell, null, index), __jsx(Table.Cell, null, link.TimeStamp), __jsx(Table.Cell, null, _this3.PopupAddress(link.DataHash), _this3.state.copied ? __jsx(\"span\", {\n          style: {\n            color: 'red'\n          }\n        }, \"Copied.\") : null), __jsx(Table.Cell, null, __jsx(Link, {\n          route: \"/records/read/\".concat(link.DataHash)\n        }, \"Read\")));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var address = this.props.address;\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, {\n        columns: 2\n      }, __jsx(Grid.Column, null, __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"ID\"), __jsx(Table.HeaderCell, null, \"Time\"), __jsx(Table.HeaderCell, null, \"Reference\"), __jsx(Table.HeaderCell, null, \"Read\"))), __jsx(Table.Body, null, this.renderRow()))), __jsx(Grid.Column, null, __jsx(Link, {\n        route: \"/records/add/\".concat(address)\n      }, __jsx(\"a\", null, __jsx(Button, {\n        content: \"send data\",\n        primary: true,\n        floated: \"right\"\n      })))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address, patient, referencesCount, references;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = props.query.address;\n              patient = Patient(address);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(patient.methods.GetReferences().call());\n\n            case 4:\n              referencesCount = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(referencesCount)).fill().map(function (element, index) {\n                return patient.methods.data_references(index).call();\n              })));\n\n            case 7:\n              references = _context.sent;\n              return _context.abrupt(\"return\", {\n                references: references,\n                address: address\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return patientShow;\n}(React.Component);\n\nexport default patientShow;","map":{"version":3,"sources":["D:/Project/Local server/pages/patients/show.js"],"names":["React","Layout","Patient","truncateMiddle","Card","Table","Grid","Button","Popup","GridColumn","GridRow","Link","CopyToClipboard","patientShow","copied","text","state","props","references","map","link","index","TimeStamp","PopupAddress","DataHash","color","address","renderRow","query","patient","methods","GetReferences","call","referencesCount","Promise","all","Array","parseInt","fill","element","data_references","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Patient from \"../../Ethereum/patient\";\r\nimport truncateMiddle from \"truncate-middle\";\r\n// import header from \"../../components/header\";\r\nimport { Card, Table, Grid, Button, Popup, GridColumn, GridRow } from \"semantic-ui-react\";\r\n// import web3 from \"../../Ethereum/web3\";\r\nimport { Link } from \"../../routes\";\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\n\r\nclass patientShow extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query;\r\n        const patient = Patient(address);\r\n\r\n\r\n        const referencesCount = await patient.methods.GetReferences().call();\r\n        const references = await Promise.all(\r\n            Array(parseInt(referencesCount))\r\n                .fill()\r\n                .map((element, index) => {\r\n                    return patient.methods.data_references(index).call();\r\n                })\r\n        );\r\n\r\n        return {\r\n            references, address\r\n        };\r\n\r\n    }\r\n    state = {\r\n        copied: false\r\n\r\n    }\r\n    PopupAddress(text) {\r\n        return (\r\n            <CopyToClipboard text={text} onCopy={() => this.state.copied = true}>\r\n                <Popup content={text}\r\n                    trigger={<Button content={truncateMiddle(text, 5, 5, '....')} />} />\r\n            </CopyToClipboard>\r\n        )\r\n    }\r\n    renderRow() {\r\n\r\n\r\n        return this.props.references.map((link, index) => {\r\n            return (\r\n                <Table.Row>\r\n                    <Table.Cell>{index}</Table.Cell>\r\n                    <Table.Cell>{link.TimeStamp}</Table.Cell>\r\n                    <Table.Cell>\r\n                        {this.PopupAddress(link.DataHash)}\r\n                        {this.state.copied ? <span style={{ color: 'red' }}>Copied.</span> : null}\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        <Link route={`/records/read/${link.DataHash}`}>Read</Link>\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n            )\r\n        });\r\n\r\n    }\r\n    render() {\r\n        const { address } = this.props;\r\n        return (\r\n            <Layout>\r\n                <Grid >\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column>\r\n                            <Table>\r\n                                <Table.Header>\r\n                                    <Table.Row>\r\n                                        <Table.HeaderCell>ID</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Time</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Reference</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Read</Table.HeaderCell>\r\n                                    </Table.Row>\r\n                                </Table.Header>\r\n                                <Table.Body>{this.renderRow()}</Table.Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Link route={`/records/add/${address}`}>\r\n                                <a>\r\n                                    <Button\r\n                                        content=\"send data\"\r\n                                        primary\r\n                                        floated=\"right\"\r\n\r\n                                    />\r\n                                </a>\r\n                            </Link>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid >\r\n            </Layout >\r\n        );\r\n    }\r\n}\r\nexport default patientShow;\r\n"]},"metadata":{},"sourceType":"module"}