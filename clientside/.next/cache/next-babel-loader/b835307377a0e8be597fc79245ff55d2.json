{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport axios from 'axios';\nimport Patient from '../../../Ethereum/patient';\nimport CryptoJs from 'crypto-js';\nimport Layout from \"../../../components/Layout\";\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\nimport web3 from \"../../../Ethereum/web3\";\n\nclass addRecord extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: '',\n      dataHash: '',\n      dataOwner: this.props.address,\n      date: '',\n      loading: false,\n      uploadedToChain: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault(); // hash the data\n\n      const refer = this.state.data;\n      const hashedRefer = CryptoJs.SHA256(refer);\n      const {\n        address\n      } = this.props;\n      const item = {\n        data: refer,\n        dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\n        dataOwner: this.state.dataOwner,\n        date: this.renderDate()\n      };\n      const patient = Patient(address);\n\n      try {\n        loading = true;\n        const accounts = await web3.eth.getAccounts();\n        await patient.methods.StoreReferences(item.dataHash, item.date).send({\n          from: accounts[0]\n        });\n        uploadedToChain = true;\n      } catch (err) {\n        console.log({\n          errormessage: err.message\n        });\n      } // send to private server\n\n\n      if (uploadedToChain == true) {\n        axios.post('http://localhost:5000/references/save', item).then(res => console.log(res.data)).catch(error => console.log(error));\n        this.setState({\n          data: '',\n          dataHash: '',\n          date: '',\n          loading: false,\n          uploadedToChain: false\n        });\n      }\n    });\n  }\n\n  static async getInitialProps(props) {\n    const {\n      address\n    } = props.query;\n    return {\n      address\n    };\n  }\n\n  renderDate() {\n    const tempDate = new Date();\n    const date = tempDate.getMonth() + 1 + '-' + tempDate.getDate() + '-' + tempDate.getFullYear() + ' at ';\n    const timeNow = tempDate.toLocaleString('en-US', {\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      hour12: true\n    });\n    const dateTime = date + timeNow;\n    return __jsx(\"p\", null, dateTime);\n  }\n\n  render() {\n    const {\n      address\n    } = this.props;\n    return __jsx(Layout, null, __jsx(\"div\", null, __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      label: \"Input Data\",\n      value: this.state.data,\n      onChange: event => this.setState({\n        data: event.target.value\n      })\n    }), __jsx(Input, {\n      label: \"Data Owner\",\n      value: this.state.dataOwner,\n      disabled: true\n    }), __jsx(Input, {\n      label: \"Date \",\n      value: this.state.date,\n      onChange: event => this.setState({\n        date: event.target.value\n      })\n    })), __jsx(Button, {\n      loading: this.state.loading,\n      className: \"btn btn-primary\"\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default addRecord;","map":{"version":3,"sources":["D:/Project/Local server/pages/patients/records/addRecord.js"],"names":["React","axios","Patient","CryptoJs","Layout","Button","Input","Form","Message","web3","addRecord","Component","data","dataHash","dataOwner","props","address","date","loading","uploadedToChain","event","preventDefault","refer","state","hashedRefer","SHA256","item","toString","enc","Hex","renderDate","patient","accounts","eth","getAccounts","methods","StoreReferences","send","from","err","console","log","errormessage","message","post","then","res","catch","error","setState","getInitialProps","query","tempDate","Date","getMonth","getDate","getFullYear","timeNow","toLocaleString","hour","minute","second","hour12","dateTime","render","onSubmit","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Patient from '../../../Ethereum/patient';\r\nimport CryptoJs from 'crypto-js';\r\nimport Layout from \"../../../components/Layout\";\r\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\r\nimport web3 from \"../../../Ethereum/web3\";\r\n\r\n\r\nclass addRecord extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query\r\n        return { address }\r\n    }\r\n\r\n    state = {\r\n        data: '',\r\n        dataHash: '',\r\n        dataOwner: this.props.address,\r\n        date: '',\r\n        loading: false,\r\n        uploadedToChain: false,\r\n    }\r\n    renderDate() {\r\n\r\n        const tempDate = new Date();\r\n        const date = (tempDate.getMonth() + 1)\r\n            + '-' + tempDate.getDate() + '-'\r\n            + tempDate.getFullYear() + ' at ';\r\n        const timeNow = tempDate.toLocaleString('en-US', {\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            second: 'numeric',\r\n            hour12: true\r\n        })\r\n        const dateTime = date + timeNow;\r\n        return (\r\n            <p>{dateTime}</p>\r\n        );\r\n    }\r\n    onSubmit = async event => {\r\n\r\n        event.preventDefault();\r\n        // hash the data\r\n        const refer = this.state.data;\r\n        const hashedRefer = CryptoJs.SHA256(refer);\r\n        const { address } = this.props;\r\n        const item =\r\n        {\r\n            data: refer,\r\n            dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\r\n            dataOwner: this.state.dataOwner,\r\n            date: this.renderDate()\r\n        }\r\n        const patient = Patient(address);\r\n\r\n        try {\r\n            loading = true;\r\n            const accounts = await web3.eth.getAccounts();\r\n            await patient.methods.StoreReferences(\r\n                item.dataHash,\r\n                item.date).send({\r\n                    from: accounts[0],\r\n                });\r\n            uploadedToChain = true;\r\n        } catch (err) {\r\n            console.log({ errormessage: err.message });\r\n        }\r\n        // send to private server\r\n        if (uploadedToChain == true) {\r\n            axios.post('http://localhost:5000/references/save', item)\r\n                .then(res => console.log(res.data))\r\n                .catch(error => console.log(error));\r\n\r\n\r\n            this.setState({\r\n                data: '',\r\n                dataHash: '',\r\n                date: '',\r\n                loading: false,\r\n                uploadedToChain: false\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const { address } = this.props;\r\n        return (\r\n            <Layout>\r\n                <div>\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <Form.Field>\r\n                            <Input\r\n                                label=\"Input Data\"\r\n                                value={this.state.data}\r\n                                onChange={event => this.setState({ data: event.target.value })} />\r\n\r\n                            <Input\r\n                                label=\"Data Owner\"\r\n                                value={this.state.dataOwner} disabled\r\n                            />\r\n\r\n                            <Input\r\n                                label=\"Date \"\r\n                                value={this.state.date}\r\n                                onChange={event => this.setState({ date: event.target.value })} />\r\n                        </Form.Field>\r\n                        <Button loading={this.state.loading} className=\"btn btn-primary\">Submit</Button>\r\n                    </Form>\r\n                </div>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default addRecord;"]},"metadata":{},"sourceType":"module"}