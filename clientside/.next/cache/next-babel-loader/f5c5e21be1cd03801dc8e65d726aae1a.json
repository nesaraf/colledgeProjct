{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Patient from \"../../Ethereum/patient\";\nimport truncateMiddle from \"truncate-middle\"; // import header from \"../../components/header\";\n\nimport { Card, Table, Grid, Button, Popup, GridColumn, GridRow } from \"semantic-ui-react\";\nimport web3 from \"../../Ethereum/web3\";\nimport { Link } from \"../../routes\";\n\nclass patientShow extends React.Component {\n  static async getInitialProps(props) {\n    const {\n      address\n    } = props.query;\n    const patient = Patient(address);\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n    const referencesCount = await patient.methods.GetReferences(\"0xB47cCb9ee8084cFc61D738625b99C9c0Fd92E391\").call();\n    const references = await Promise.all(Array(parseInt(referencesCount)).fill().map((element, index) => {\n      return patient.methods.data_references(index).call();\n    }));\n    return {\n      references,\n      address\n    };\n  }\n\n  PopupAddress(text) {\n    return __jsx(Popup, {\n      content: text,\n      trigger: __jsx(Button, {\n        content: truncateMiddle(text, 5, 5, '....')\n      })\n    });\n  }\n\n  renderRow() {\n    return this.props.references.map((link, index) => {\n      return __jsx(Table.Row, null, __jsx(Table.Cell, null, index), __jsx(Table.Cell, null, link.TimeStamp), __jsx(Table.Cell, null, this.PopupAddress(link.DataHash)), __jsx(Table.Cell, null, __jsx(Link, {\n        route: `/records/read/${link.DataHash}`\n      }, \"Read\")));\n    });\n  }\n\n  render() {\n    const {\n      address\n    } = this.props;\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, {\n      columns: 2\n    }, __jsx(Grid.Column, null, __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"ID\"), __jsx(Table.HeaderCell, null, \"Time\"), __jsx(Table.HeaderCell, null, \"Reference\"), __jsx(Table.HeaderCell, null, \"Read\"))), __jsx(Table.Body, null, this.renderRow()))), __jsx(Grid.Column, null, __jsx(Link, {\n      route: `/records/add/${address}`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      content: \"send data\",\n      primary: true,\n      floated: \"right\"\n    })))))));\n  }\n\n}\n\nexport default patientShow;","map":{"version":3,"sources":["D:/Project/clientside/pages/patients/show.js"],"names":["React","Layout","Patient","truncateMiddle","Card","Table","Grid","Button","Popup","GridColumn","GridRow","web3","Link","patientShow","Component","getInitialProps","props","address","query","patient","accounts","eth","getAccounts","console","log","referencesCount","methods","GetReferences","call","references","Promise","all","Array","parseInt","fill","map","element","index","data_references","PopupAddress","text","renderRow","link","TimeStamp","DataHash","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Patient from \"../../Ethereum/patient\";\r\nimport truncateMiddle from \"truncate-middle\";\r\n// import header from \"../../components/header\";\r\nimport { Card, Table, Grid, Button, Popup, GridColumn, GridRow } from \"semantic-ui-react\";\r\nimport web3 from \"../../Ethereum/web3\";\r\nimport { Link } from \"../../routes\";\r\n\r\nclass patientShow extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query;\r\n        const patient = Patient(address);\r\n        const accounts = await web3.eth.getAccounts();\r\n        console.log(accounts)\r\n\r\n        const referencesCount = await patient.methods.GetReferences(\"0xB47cCb9ee8084cFc61D738625b99C9c0Fd92E391\").call();\r\n        const references = await Promise.all(\r\n            Array(parseInt(referencesCount))\r\n                .fill()\r\n                .map((element, index) => {\r\n                    return patient.methods.data_references(index).call();\r\n                })\r\n        );\r\n\r\n\r\n        return {\r\n            references, address\r\n        };\r\n\r\n    }\r\n    PopupAddress(text) {\r\n        return (\r\n\r\n            <Popup content={text}\r\n                trigger={<Button content={truncateMiddle(text, 5, 5, '....')} />} />\r\n\r\n        )\r\n    }\r\n    renderRow() {\r\n\r\n\r\n        return this.props.references.map((link, index) => {\r\n            return (\r\n                <Table.Row>\r\n                    <Table.Cell>{index}</Table.Cell>\r\n                    <Table.Cell>{link.TimeStamp}</Table.Cell>\r\n                    <Table.Cell>\r\n                        {this.PopupAddress(link.DataHash)}\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        <Link route={`/records/read/${link.DataHash}`}>Read</Link>\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n            )\r\n        });\r\n\r\n    }\r\n    render() {\r\n        const { address } = this.props;\r\n        return (\r\n            <Layout>\r\n                <Grid >\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column>\r\n                            <Table>\r\n                                <Table.Header>\r\n                                    <Table.Row>\r\n                                        <Table.HeaderCell>ID</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Time</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Reference</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Read</Table.HeaderCell>\r\n                                    </Table.Row>\r\n                                </Table.Header>\r\n                                <Table.Body>{this.renderRow()}</Table.Body>\r\n                            </Table>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Link route={`/records/add/${address}`}>\r\n                                <a>\r\n                                    <Button\r\n                                        content=\"send data\"\r\n                                        primary\r\n                                        floated=\"right\"\r\n\r\n                                    />\r\n                                </a>\r\n                            </Link>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid >\r\n            </Layout >\r\n        );\r\n    }\r\n}\r\nexport default patientShow;\r\n"]},"metadata":{},"sourceType":"module"}