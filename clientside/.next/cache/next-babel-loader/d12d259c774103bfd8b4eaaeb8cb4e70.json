{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Patient from \"../../Ethereum/patient\";\nimport truncateMiddle from \"truncate-middle\"; // import header from \"../../components/header\";\n\nimport { Card, Table, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../Ethereum/web3\";\nimport { Link } from \"../../routes\";\n\nclass patientShow extends React.Component {\n  static async getInitialProps(props) {\n    const {\n      address\n    } = props.query;\n    const patient = Patient(address);\n    const referencesCount = await patient.methods.GetReferences().call();\n    const references = await Promise.all(Array(parseInt(referencesCount)).fill().map((element, index) => {\n      return patient.methods.data_references(index).call();\n    }));\n    console.log(references);\n    return {\n      references\n    };\n  }\n\n  renderRow() {\n    return this.props.references.map((link, index) => {\n      return __jsx(Table.Row, null, __jsx(Table.Cell, null, index), __jsx(Table.Cell, null, link.TimeStamp), __jsx(Table.Cell, null, truncateMiddle(link.DataHash)));\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Column, {\n      width: 12\n    }, __jsx(Grid.Row, null, __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"ID\"), __jsx(Table.HeaderCell, null, \"Time\"), __jsx(Table.HeaderCell, null, \"Reference\"))), __jsx(Table.Body, null, this.renderRow()))))));\n  }\n\n}\n\nexport default patientShow;","map":{"version":3,"sources":["D:/Project/Local server/pages/patients/show.js"],"names":["React","Layout","Patient","truncateMiddle","Card","Table","Grid","Button","web3","Link","patientShow","Component","getInitialProps","props","address","query","patient","referencesCount","methods","GetReferences","call","references","Promise","all","Array","parseInt","fill","map","element","index","data_references","console","log","renderRow","link","TimeStamp","DataHash","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,cAAP,MAA2B,iBAA3B,C,CACA;;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,MAA5B,QAA0C,mBAA1C;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,IAAT,QAAqB,cAArB;;AAEA,MAAMC,WAAN,SAA0BV,KAAK,CAACW,SAAhC,CAA0C;AACtC,eAAaC,eAAb,CAA6BC,KAA7B,EAAoC;AAChC,UAAM;AAAEC,MAAAA;AAAF,QAAcD,KAAK,CAACE,KAA1B;AACA,UAAMC,OAAO,GAAGd,OAAO,CAACY,OAAD,CAAvB;AAGA,UAAMG,eAAe,GAAG,MAAMD,OAAO,CAACE,OAAR,CAAgBC,aAAhB,GAAgCC,IAAhC,EAA9B;AACA,UAAMC,UAAU,GAAG,MAAMC,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACR,eAAD,CAAT,CAAL,CACKS,IADL,GAEKC,GAFL,CAES,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrB,aAAOb,OAAO,CAACE,OAAR,CAAgBY,eAAhB,CAAgCD,KAAhC,EAAuCT,IAAvC,EAAP;AACH,KAJL,CADqB,CAAzB;AAQAW,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AACA,WAAO;AACHA,MAAAA;AADG,KAAP;AAIH;;AACDY,EAAAA,SAAS,GAAG;AAER,WAAO,KAAKpB,KAAL,CAAWQ,UAAX,CAAsBM,GAAtB,CAA0B,CAACO,IAAD,EAAOL,KAAP,KAAiB;AAC9C,aACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,IAAP,QAAaA,KAAb,CADJ,EAEI,MAAC,KAAD,CAAO,IAAP,QAAaK,IAAI,CAACC,SAAlB,CAFJ,EAGI,MAAC,KAAD,CAAO,IAAP,QAAahC,cAAc,CAAC+B,IAAI,CAACE,QAAN,CAA3B,CAHJ,CADJ;AAOH,KARM,CAAP;AAUH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,MAAD,QACI,MAAC,IAAD,QACI,MAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAApB,OACI,MAAC,IAAD,CAAM,GAAN,QACI,MAAC,KAAD,QACI,MAAC,KAAD,CAAO,MAAP,QACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,UAAP,aADJ,EAEI,MAAC,KAAD,CAAO,UAAP,eAFJ,EAGI,MAAC,KAAD,CAAO,UAAP,oBAHJ,CADJ,CADJ,EAQI,MAAC,KAAD,CAAO,IAAP,QAAa,KAAKJ,SAAL,EAAb,CARJ,CADJ,CADJ,CADJ,CADJ,CADJ;AAyBH;;AA5DqC;;AA8D1C,eAAevB,WAAf","sourcesContent":["import React from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Patient from \"../../Ethereum/patient\";\r\nimport truncateMiddle from \"truncate-middle\";\r\n// import header from \"../../components/header\";\r\nimport { Card, Table, Grid, Button } from \"semantic-ui-react\";\r\nimport web3 from \"../../Ethereum/web3\";\r\nimport { Link } from \"../../routes\";\r\n\r\nclass patientShow extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query;\r\n        const patient = Patient(address);\r\n\r\n\r\n        const referencesCount = await patient.methods.GetReferences().call();\r\n        const references = await Promise.all(\r\n            Array(parseInt(referencesCount))\r\n                .fill()\r\n                .map((element, index) => {\r\n                    return patient.methods.data_references(index).call();\r\n                })\r\n        );\r\n\r\n        console.log(references);\r\n        return {\r\n            references\r\n        };\r\n\r\n    }\r\n    renderRow() {\r\n\r\n        return this.props.references.map((link, index) => {\r\n            return (\r\n                <Table.Row>\r\n                    <Table.Cell>{index}</Table.Cell>\r\n                    <Table.Cell>{link.TimeStamp}</Table.Cell>\r\n                    <Table.Cell>{truncateMiddle(link.DataHash)}</Table.Cell>\r\n                </Table.Row>\r\n            )\r\n        });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Column width={12}>\r\n                        <Grid.Row>\r\n                            <Table>\r\n                                <Table.Header>\r\n                                    <Table.Row>\r\n                                        <Table.HeaderCell>ID</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Time</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Reference</Table.HeaderCell>\r\n                                    </Table.Row>\r\n                                </Table.Header>\r\n                                <Table.Body>{this.renderRow()}</Table.Body>\r\n                            </Table>\r\n                            {/* <Link route={`/patients/${this.props.address}/requests`}>\r\n                                <a>\r\n                                    <Button content=\"view Requests\" className=\"ui green button\" />\r\n                                </a>\r\n                            </Link> */}\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default patientShow;\r\n"]},"metadata":{},"sourceType":"module"}