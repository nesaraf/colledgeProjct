{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Patient from \"../../Ethereum/patient\"; // import header from \"../../components/header\";\n\nimport { Card, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../Ethereum/web3\";\nimport { Link } from \"../../routes\";\n\nvar patientShow = /*#__PURE__*/function (_React$Component) {\n  _inherits(patientShow, _React$Component);\n\n  var _super = _createSuper(patientShow);\n\n  function patientShow() {\n    _classCallCheck(this, patientShow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(patientShow, null, [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address, patient;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = props.query.address;\n              patient = Patient(address); // const referencesCount = await patient.methods.data_references().call();\n              // const references = await Promise.all(\n              //     Array(parseInt(referencesCount))\n              //         .fill()\n              //         .map((element, index) => {\n              //             return patient.methods.data_references(index).call();\n              //         })\n              // );\n              // return { dataHash, TimeStamp }\n\n              console.log(patient.methods);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    } // renderCards() {\n    //     const {\n    //         dataReference,\n    //         uploadTime,\n    //     } = this.props;\n    //     const items = [\n    //         {\n    //             header: dataReference,\n    //             meta: uploadTime,\n    //             description:\n    //                 \"to access the data click on the link at the top\",\n    //             style: { overflowWrap: \"break-word\" }\n    //         },\n    //     ];\n    //     return <Card.Group items={items} />;\n    // }\n    // render() {\n    //     return (\n    //         <Layout>\n    //             <Grid>\n    //                 <Grid.Column width={10}>\n    //                     <Grid.Row> {this.renderCards()} </Grid.Row>\n    //                     <Grid.Row>\n    //                         <Link route={`/patients/${this.props.address}/requests`}>\n    //                             <a>\n    //                                 <Button content=\"view Requests\" className=\"ui green button\" />\n    //                             </a>\n    //                         </Link>\n    //                     </Grid.Row>\n    //                 </Grid.Column>\n    //             </Grid>\n    //         </Layout>\n    //     );\n    // }\n\n  }]);\n\n  return patientShow;\n}(React.Component);\n\nexport default patientShow;","map":{"version":3,"sources":["D:/Project/Local server/pages/patients/show.js"],"names":["React","Layout","Patient","Card","Grid","Button","web3","Link","patientShow","props","address","query","patient","console","log","methods","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CACA;;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,QAAmC,mBAAnC;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,IAAT,QAAqB,cAArB;;IAEMC,W;;;;;;;;;;;;;oCAC2BC,K;;;;;;AACjBC,cAAAA,O,GAAYD,KAAK,CAACE,K,CAAlBD,O;AACFE,cAAAA,O,GAAUV,OAAO,CAACQ,OAAD,C,EAGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAG,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,OAApB;;;;;;;;MAEJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;EAnDsBf,KAAK,CAACgB,S;;AAqDhC,eAAeR,WAAf","sourcesContent":["import React from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Patient from \"../../Ethereum/patient\";\r\n// import header from \"../../components/header\";\r\nimport { Card, Grid, Button } from \"semantic-ui-react\";\r\nimport web3 from \"../../Ethereum/web3\";\r\nimport { Link } from \"../../routes\";\r\n\r\nclass patientShow extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query;\r\n        const patient = Patient(address);\r\n\r\n\r\n        // const referencesCount = await patient.methods.data_references().call();\r\n        // const references = await Promise.all(\r\n        //     Array(parseInt(referencesCount))\r\n        //         .fill()\r\n        //         .map((element, index) => {\r\n        //             return patient.methods.data_references(index).call();\r\n        //         })\r\n        // );\r\n        // return { dataHash, TimeStamp }\r\n        console.log(patient.methods);\r\n    }\r\n    // renderCards() {\r\n    //     const {\r\n    //         dataReference,\r\n    //         uploadTime,\r\n    //     } = this.props;\r\n\r\n    //     const items = [\r\n    //         {\r\n    //             header: dataReference,\r\n    //             meta: uploadTime,\r\n    //             description:\r\n    //                 \"to access the data click on the link at the top\",\r\n    //             style: { overflowWrap: \"break-word\" }\r\n    //         },\r\n    //     ];\r\n    //     return <Card.Group items={items} />;\r\n    // }\r\n    // render() {\r\n    //     return (\r\n    //         <Layout>\r\n    //             <Grid>\r\n    //                 <Grid.Column width={10}>\r\n    //                     <Grid.Row> {this.renderCards()} </Grid.Row>\r\n    //                     <Grid.Row>\r\n    //                         <Link route={`/patients/${this.props.address}/requests`}>\r\n    //                             <a>\r\n    //                                 <Button content=\"view Requests\" className=\"ui green button\" />\r\n    //                             </a>\r\n    //                         </Link>\r\n    //                     </Grid.Row>\r\n    //                 </Grid.Column>\r\n    //             </Grid>\r\n    //         </Layout>\r\n    //     );\r\n    // }\r\n}\r\nexport default patientShow;\r\n"]},"metadata":{},"sourceType":"module"}