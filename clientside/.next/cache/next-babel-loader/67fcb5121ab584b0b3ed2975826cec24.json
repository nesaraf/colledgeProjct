{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport axios from 'axios';\nimport Patient from '../../../Ethereum/patient';\nimport CryptoJs from 'crypto-js';\nimport Layout from \"../../../components/Layout\";\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\nimport web3 from \"../../../Ethereum/web3\";\nimport { Router } from \"../../../routes\";\n\nvar addRecord = /*#__PURE__*/function (_React$Component) {\n  _inherits(addRecord, _React$Component);\n\n  var _super = _createSuper(addRecord);\n\n  function addRecord() {\n    var _this;\n\n    _classCallCheck(this, addRecord);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: '',\n      dataHash: '',\n      dataOwner: _this.props.address,\n      date: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function _callee(event) {\n      var refer, hashedRefer, address, item, patient;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault(); // hash the data\n\n              refer = _this.state.data;\n              hashedRefer = CryptoJs.SHA256(refer);\n              address = _this.props.address;\n              item = {\n                data: refer,\n                dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\n                dataOwner: _this.state.dataOwner,\n                date: _this.state.date\n              };\n              patient = Patient(address); // try {\n              //     const accounts = await web3.eth.getAccounts();\n              //     await patient.methods.StoreReferences(\n              //         item.dataHash,\n              //         item.date).send({\n              //             from: accounts[0],\n              //         });\n              // } catch (err) {\n              //     console.log({ errormessage: err.message });\n              // }\n              // send to private server\n\n              axios.post('http://localhost:5000/references/save', item).then(function (res) {\n                return console.log(res.data);\n              });\n\n              _this.setState({\n                data: '',\n                dataHash: '',\n                date: ''\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(addRecord, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var address = this.props.address;\n      return __jsx(Layout, null, __jsx(\"div\", null, __jsx(Form, {\n        onSubmit: this.onSubmit\n      }, __jsx(Form.Field, null, __jsx(Input, {\n        label: \"Input Data\",\n        value: this.state.data,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            data: event.target.value\n          });\n        }\n      }), __jsx(Input, {\n        label: \"Data Owner\",\n        value: address,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            dataOwner: event.target.value\n          });\n        }\n      }), __jsx(Input, {\n        label: \"Date \",\n        value: this.state.date,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            date: event.target.value\n          });\n        }\n      })), __jsx(Button, {\n        className: \"btn btn-primary\"\n      }, \"Submit\"))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address;\n      return _regeneratorRuntime.async(function getInitialProps$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              address = props.query.address;\n              return _context2.abrupt(\"return\", {\n                address: address\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return addRecord;\n}(React.Component);\n\nexport default addRecord;","map":{"version":3,"sources":["D:/Project/Local server/pages/patients/records/addRecord.js"],"names":["React","axios","Patient","CryptoJs","Layout","Button","Input","Form","Message","web3","Router","addRecord","data","dataHash","dataOwner","props","address","date","event","preventDefault","refer","state","hashedRefer","SHA256","item","toString","enc","Hex","patient","post","then","res","console","log","setState","onSubmit","target","value","query","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Patient from '../../../Ethereum/patient';\r\nimport CryptoJs from 'crypto-js';\r\nimport Layout from \"../../../components/Layout\";\r\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\r\nimport web3 from \"../../../Ethereum/web3\";\r\nimport { Router } from \"../../../routes\";\r\n\r\nclass addRecord extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query\r\n        return { address }\r\n    }\r\n\r\n    state = {\r\n        data: '',\r\n        dataHash: '',\r\n        dataOwner: this.props.address,\r\n        date: ''\r\n    }\r\n    onSubmit = async event => {\r\n\r\n        event.preventDefault();\r\n        // hash the data\r\n        const refer = this.state.data;\r\n        const hashedRefer = CryptoJs.SHA256(refer);\r\n        const { address } = this.props;\r\n        const item =\r\n        {\r\n            data: refer,\r\n            dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\r\n            dataOwner: this.state.dataOwner,\r\n            date: this.state.date\r\n        }\r\n        const patient = Patient(address);\r\n\r\n        // try {\r\n        //     const accounts = await web3.eth.getAccounts();\r\n        //     await patient.methods.StoreReferences(\r\n        //         item.dataHash,\r\n        //         item.date).send({\r\n        //             from: accounts[0],\r\n        //         });\r\n        // } catch (err) {\r\n        //     console.log({ errormessage: err.message });\r\n        // }\r\n        // send to private server\r\n        axios.post('http://localhost:5000/references/save', item)\r\n            .then(res => console.log(res.data));\r\n\r\n\r\n        this.setState({\r\n            data: '',\r\n            dataHash: '',\r\n            date: ''\r\n        })\r\n    }\r\n    render() {\r\n        const { address } = this.props;\r\n        return (\r\n            <Layout>\r\n                <div>\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <Form.Field>\r\n                            <Input\r\n                                label=\"Input Data\"\r\n                                value={this.state.data}\r\n                                onChange={event => this.setState({ data: event.target.value })} />\r\n\r\n                            <Input\r\n                                label=\"Data Owner\"\r\n                                value={address}\r\n                                onChange={event => this.setState({ dataOwner: event.target.value })} />\r\n\r\n                            <Input\r\n                                label=\"Date \"\r\n                                value={this.state.date}\r\n                                onChange={event => this.setState({ date: event.target.value })} />\r\n                        </Form.Field>\r\n                        <Button className=\"btn btn-primary\">Submit</Button>\r\n                    </Form>\r\n                </div>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default addRecord;"]},"metadata":{},"sourceType":"module"}