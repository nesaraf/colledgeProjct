{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport axios from 'axios';\nimport Patient from '../../../Ethereum/patient';\nimport CryptoJs from 'crypto-js';\nimport Layout from \"../../../components/Layout\";\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\nimport web3 from \"../../../Ethereum/web3\";\nimport Router from 'next/router';\n\nclass addRecord extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: '',\n      dataHash: '',\n      dataOwner: this.props.address,\n      date: '',\n      loading: false,\n      uploadedToChain: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      console.log(this.renderDate()); // hash the data\n\n      const refer = this.state.data;\n      const hashedRefer = CryptoJs.SHA256(refer);\n      const {\n        address\n      } = this.props;\n      const item = {\n        data: refer,\n        dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\n        dataOwner: this.state.dataOwner,\n        date: this.renderDate()\n      };\n      const patient = Patient(address);\n\n      try {\n        this.state.loading = true;\n        const accounts = await web3.eth.getAccounts();\n        await patient.methods.StoreReferences(item.dataHash, item.date).send({\n          from: accounts[0]\n        });\n        this.state.uploadedToChain = true;\n      } catch (err) {\n        console.log({\n          errormessage: err.message\n        });\n      } // send to private server\n\n\n      if (this.state.uploadedToChain == true) {\n        axios.post('http://localhost:5000/info/save', item).then(res => console.log(res.data)).catch(error => console.log(error));\n        this.setState({\n          data: '',\n          dataHash: '',\n          date: '',\n          loading: false,\n          uploadedToChain: false\n        });\n        Router.back();\n      }\n    });\n  }\n\n  static async getInitialProps(props) {\n    const {\n      address\n    } = props.query;\n    return {\n      address\n    };\n  }\n\n  renderDate() {\n    const tempDate = new Date();\n    const date = tempDate.getMonth() + 1 + '-' + tempDate.getDate() + '-' + tempDate.getFullYear() + ' at ';\n    const timeNow = tempDate.toLocaleString('en-US', {\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      hour12: true\n    });\n    const dateTime = date + timeNow;\n    return dateTime;\n  }\n\n  render() {\n    const {\n      address\n    } = this.props;\n    return __jsx(Layout, null, __jsx(\"div\", null, __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      label: \"Input Data\",\n      value: this.state.data,\n      onChange: event => this.setState({\n        data: event.target.value\n      })\n    }), __jsx(Input, {\n      label: \"Data Owner\",\n      value: this.state.dataOwner,\n      disabled: true\n    })), __jsx(Button, {\n      loading: this.state.loading,\n      className: \"btn btn-primary\"\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default addRecord;","map":{"version":3,"sources":["D:/Project/clientside/pages/patients/records/addRecord.js"],"names":["React","axios","Patient","CryptoJs","Layout","Button","Input","Form","Message","web3","Router","addRecord","Component","data","dataHash","dataOwner","props","address","date","loading","uploadedToChain","event","preventDefault","console","log","renderDate","refer","state","hashedRefer","SHA256","item","toString","enc","Hex","patient","accounts","eth","getAccounts","methods","StoreReferences","send","from","err","errormessage","message","post","then","res","catch","error","setState","back","getInitialProps","query","tempDate","Date","getMonth","getDate","getFullYear","timeNow","toLocaleString","hour","minute","second","hour12","dateTime","render","onSubmit","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Patient from '../../../Ethereum/patient';\r\nimport CryptoJs from 'crypto-js';\r\nimport Layout from \"../../../components/Layout\";\r\nimport { Button, Input, Form, Message } from \"semantic-ui-react\";\r\nimport web3 from \"../../../Ethereum/web3\";\r\nimport Router from 'next/router';\r\n\r\n\r\nclass addRecord extends React.Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query\r\n        return { address }\r\n    }\r\n\r\n    state = {\r\n        data: '',\r\n        dataHash: '',\r\n        dataOwner: this.props.address,\r\n        date: '',\r\n        loading: false,\r\n        uploadedToChain: false,\r\n    }\r\n    renderDate() {\r\n\r\n        const tempDate = new Date();\r\n        const date = (tempDate.getMonth() + 1)\r\n            + '-' + tempDate.getDate() + '-'\r\n            + tempDate.getFullYear() + ' at ';\r\n        const timeNow = tempDate.toLocaleString('en-US', {\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            second: 'numeric',\r\n            hour12: true\r\n        })\r\n        const dateTime = date + timeNow;\r\n        return (\r\n            dateTime\r\n        );\r\n    }\r\n    onSubmit = async event => {\r\n        event.preventDefault();\r\n        console.log(this.renderDate());\r\n        // hash the data\r\n        const refer = this.state.data;\r\n        const hashedRefer = CryptoJs.SHA256(refer);\r\n        const { address } = this.props;\r\n        const item =\r\n        {\r\n            data: refer,\r\n            dataHash: hashedRefer.toString(CryptoJs.enc.Hex),\r\n            dataOwner: this.state.dataOwner,\r\n            date: this.renderDate()\r\n        }\r\n        const patient = Patient(address);\r\n\r\n        try {\r\n            this.state.loading = true;\r\n            const accounts = await web3.eth.getAccounts();\r\n            await patient.methods.StoreReferences(\r\n                item.dataHash,\r\n                item.date).send({\r\n                    from: accounts[0],\r\n                });\r\n            this.state.uploadedToChain = true;\r\n        } catch (err) {\r\n            console.log({ errormessage: err.message });\r\n        }\r\n        // send to private server\r\n        if (this.state.uploadedToChain == true) {\r\n            axios.post('http://localhost:5000/info/save', item)\r\n                .then(res => console.log(res.data))\r\n                .catch(error => console.log(error));\r\n\r\n\r\n            this.setState({\r\n                data: '',\r\n                dataHash: '',\r\n                date: '',\r\n                loading: false,\r\n                uploadedToChain: false\r\n            })\r\n            Router.back();\r\n        }\r\n    }\r\n    render() {\r\n        const { address } = this.props;\r\n        return (\r\n            <Layout>\r\n                <div>\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <Form.Field>\r\n                            <Input\r\n                                label=\"Input Data\"\r\n                                value={this.state.data}\r\n                                onChange={event => this.setState({ data: event.target.value })} />\r\n\r\n                            <Input\r\n                                label=\"Data Owner\"\r\n                                value={this.state.dataOwner} disabled\r\n                            />\r\n\r\n                            {/* <Input\r\n                                label=\"Date \"\r\n                                value={this.state.date}\r\n                                onChange={event => this.setState({ date: event.target.value })} /> */}\r\n                        </Form.Field>\r\n                        <Button loading={this.state.loading} className=\"btn btn-primary\">Submit</Button>\r\n                    </Form>\r\n                </div>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default addRecord;"]},"metadata":{},"sourceType":"module"}